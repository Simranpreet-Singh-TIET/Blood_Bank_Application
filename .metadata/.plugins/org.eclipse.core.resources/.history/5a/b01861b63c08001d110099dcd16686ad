package donor;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.ResourceBundle;
//import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.PreparedStatement;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;

public class DonorMasterViewController {

    @FXML
    private ResourceBundle resources;

    @FXML
    private URL location;

    @FXML
    private TextField add;
    
    @FXML
    private ImageView imag;
    
    @FXML
    private TextField age;

    @FXML
    private ComboBox<String> bgroup;

    @FXML
    private TextField city;

    @FXML
    private TextField dis;

    @FXML
    private ComboBox<String> gen;

    @FXML
    private TextField mob;

    @FXML
    private TextField name;
    Connection con;
    PreparedStatement pst;
    File f;
    void showMsg(String msg)
    {
    	Alert alert=new Alert(AlertType.ERROR);
    	alert.setTitle("Title");
    	alert.setContentText(msg);
    	alert.show();
    }

    @FXML
    void do_browse(ActionEvent event) throws FileNotFoundException  
    {
    	FileChooser file=new FileChooser();
        file.getExtensionFilters().add(new ExtensionFilter("JPG FILES","*.jpg") );
        f=file.showOpenDialog(null);
        if(f!=null)
        {
      	  try {
  			Image img=new Image(new FileInputStream(f.getAbsoluteFile()));
  			imag.setImage(img);
  			//picpath.setText(f.getAbsolutePath());
  		} catch (FileNotFoundException e) {
  			// TODO Auto-generated catch block
  			e.printStackTrace();
  		}
      	  
        }
    }

    @FXML
    void do_clear(ActionEvent event) {
    	mob.setText("");
    	name.setText("");
    	gen.getEditor().setText("");
    	add.setText("");
    	city.setText("");
    	bgroup.getEditor().setText("");
    	age.setText("");
    	dis.setText("");

    }

    @FXML
    void do_delete(ActionEvent event) {
    try
    {
    	pst=con.prepareStatement("delete from donor where mobile = ?");
    	  pst.setString(1, mob.getText());
    	  pst.executeUpdate();
    	  showMsg("DELETED");
    }
    catch(SQLException e)
    {
    	showMsg("Sorry Cant be Deleted");
    }

    }
    

    @FXML
    void do_insert(ActionEvent event) 
    {
    	try {
			pst=con.prepareStatement("insert into donors values(?,?,?,?,?,?,?,?,?,current_date())");
			pst.setString(1, mob.getText());
			pst.setString(2, f.getAbsolutePath());
			pst.setString(3, name.getText());
			pst.setString(4, gen.getEditor().getText());
			pst.setString(5, add.getText());
			pst.setString(6, city.getText());
			pst.setString(7, bgroup.getEditor().getText());
			pst.setString(8, age.getText());
			pst.setString(9, dis.getText());
			pst.executeUpdate();
			showMsg("Record Updated Succesfully");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }

    @FXML
    void do_search(ActionEvent event) {

    }

    @FXML
    void do_update(ActionEvent event) {

    }

    @FXML
    void initialize() {
       con=DatabaseConnection.doConnect();
       ArrayList<String> gender=new ArrayList<String>(Arrays.asList("Male","Female","Others"));
       gen.getItems().setAll(gender);
       ArrayList<String> bg =new ArrayList<String>(Arrays.asList("O(+ve)","O(-ve)","A(+ve)","A(-ve)","B(+ve)","B(-ve)","AB(+ve)","AB(-ve)"));
       bgroup.getItems().setAll(bg);
       }

}
